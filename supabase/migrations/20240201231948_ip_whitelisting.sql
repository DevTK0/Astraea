create table "public"."games" (
    "game_id" bigint generated by default as identity not null,
    "name" text not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."games" enable row level security;

create table "public"."server_communities" (
    "server_id" bigint not null,
    "user_id" uuid not null,
    "joined_at" timestamp with time zone not null default now(),
    "sav_filename" text
);


alter table "public"."server_communities" enable row level security;

create table "public"."servers" (
    "server_id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "description" text,
    "game_id" bigint not null
);


alter table "public"."servers" enable row level security;

create table "public"."users" (
    "user_id" uuid not null default auth.uid(),
    "ip_address" text
);


alter table "public"."users" enable row level security;

CREATE UNIQUE INDEX games_name_key ON public.games USING btree (name);

CREATE UNIQUE INDEX games_pkey ON public.games USING btree (game_id);

CREATE UNIQUE INDEX server_community_pkey ON public.server_communities USING btree (server_id, user_id);

CREATE UNIQUE INDEX servers_pkey ON public.servers USING btree (server_id);

CREATE UNIQUE INDEX servers_server_id_key ON public.servers USING btree (server_id);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (user_id);

alter table "public"."games" add constraint "games_pkey" PRIMARY KEY using index "games_pkey";

alter table "public"."server_communities" add constraint "server_community_pkey" PRIMARY KEY using index "server_community_pkey";

alter table "public"."servers" add constraint "servers_pkey" PRIMARY KEY using index "servers_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."games" add constraint "games_name_key" UNIQUE using index "games_name_key";

alter table "public"."server_communities" add constraint "server_communities_server_id_fkey" FOREIGN KEY (server_id) REFERENCES servers(server_id) not valid;

alter table "public"."server_communities" validate constraint "server_communities_server_id_fkey";

alter table "public"."server_communities" add constraint "server_communities_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(user_id) not valid;

alter table "public"."server_communities" validate constraint "server_communities_user_id_fkey";

alter table "public"."servers" add constraint "servers_game_id_fkey" FOREIGN KEY (game_id) REFERENCES games(game_id) not valid;

alter table "public"."servers" validate constraint "servers_game_id_fkey";

alter table "public"."servers" add constraint "servers_server_id_key" UNIQUE using index "servers_server_id_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into public.users (user_id)
  values (new.id);

  return new;
end;
$function$
;

grant delete on table "public"."games" to "anon";

grant insert on table "public"."games" to "anon";

grant references on table "public"."games" to "anon";

grant select on table "public"."games" to "anon";

grant trigger on table "public"."games" to "anon";

grant truncate on table "public"."games" to "anon";

grant update on table "public"."games" to "anon";

grant delete on table "public"."games" to "authenticated";

grant insert on table "public"."games" to "authenticated";

grant references on table "public"."games" to "authenticated";

grant select on table "public"."games" to "authenticated";

grant trigger on table "public"."games" to "authenticated";

grant truncate on table "public"."games" to "authenticated";

grant update on table "public"."games" to "authenticated";

grant delete on table "public"."games" to "service_role";

grant insert on table "public"."games" to "service_role";

grant references on table "public"."games" to "service_role";

grant select on table "public"."games" to "service_role";

grant trigger on table "public"."games" to "service_role";

grant truncate on table "public"."games" to "service_role";

grant update on table "public"."games" to "service_role";

grant delete on table "public"."server_communities" to "anon";

grant insert on table "public"."server_communities" to "anon";

grant references on table "public"."server_communities" to "anon";

grant select on table "public"."server_communities" to "anon";

grant trigger on table "public"."server_communities" to "anon";

grant truncate on table "public"."server_communities" to "anon";

grant update on table "public"."server_communities" to "anon";

grant delete on table "public"."server_communities" to "authenticated";

grant insert on table "public"."server_communities" to "authenticated";

grant references on table "public"."server_communities" to "authenticated";

grant select on table "public"."server_communities" to "authenticated";

grant trigger on table "public"."server_communities" to "authenticated";

grant truncate on table "public"."server_communities" to "authenticated";

grant update on table "public"."server_communities" to "authenticated";

grant delete on table "public"."server_communities" to "service_role";

grant insert on table "public"."server_communities" to "service_role";

grant references on table "public"."server_communities" to "service_role";

grant select on table "public"."server_communities" to "service_role";

grant trigger on table "public"."server_communities" to "service_role";

grant truncate on table "public"."server_communities" to "service_role";

grant update on table "public"."server_communities" to "service_role";

grant delete on table "public"."servers" to "anon";

grant insert on table "public"."servers" to "anon";

grant references on table "public"."servers" to "anon";

grant select on table "public"."servers" to "anon";

grant trigger on table "public"."servers" to "anon";

grant truncate on table "public"."servers" to "anon";

grant update on table "public"."servers" to "anon";

grant delete on table "public"."servers" to "authenticated";

grant insert on table "public"."servers" to "authenticated";

grant references on table "public"."servers" to "authenticated";

grant select on table "public"."servers" to "authenticated";

grant trigger on table "public"."servers" to "authenticated";

grant truncate on table "public"."servers" to "authenticated";

grant update on table "public"."servers" to "authenticated";

grant delete on table "public"."servers" to "service_role";

grant insert on table "public"."servers" to "service_role";

grant references on table "public"."servers" to "service_role";

grant select on table "public"."servers" to "service_role";

grant trigger on table "public"."servers" to "service_role";

grant truncate on table "public"."servers" to "service_role";

grant update on table "public"."servers" to "service_role";

grant delete on table "public"."users" to "anon";

grant insert on table "public"."users" to "anon";

grant references on table "public"."users" to "anon";

grant select on table "public"."users" to "anon";

grant trigger on table "public"."users" to "anon";

grant truncate on table "public"."users" to "anon";

grant update on table "public"."users" to "anon";

grant delete on table "public"."users" to "authenticated";

grant insert on table "public"."users" to "authenticated";

grant references on table "public"."users" to "authenticated";

grant select on table "public"."users" to "authenticated";

grant trigger on table "public"."users" to "authenticated";

grant truncate on table "public"."users" to "authenticated";

grant update on table "public"."users" to "authenticated";

grant delete on table "public"."users" to "service_role";

grant insert on table "public"."users" to "service_role";

grant references on table "public"."users" to "service_role";

grant select on table "public"."users" to "service_role";

grant trigger on table "public"."users" to "service_role";

grant truncate on table "public"."users" to "service_role";

grant update on table "public"."users" to "service_role";

create policy "users can join servers"
on "public"."server_communities"
as permissive
for all
to public
using (true)
with check (true);


create policy "users can retrieve  ip_address"
on "public"."users"
as permissive
for select
to public
using (true);


create policy "users can update their own ip_address"
on "public"."users"
as permissive
for update
to public
using ((auth.uid() = user_id))
with check ((auth.uid() = user_id));



